// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ üåê –û–±—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: –æ—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
function openIframe() {
  document.getElementById('iframeModal').classList.remove('hidden');
}
function closeIframe() {
  document.getElementById('iframeModal').classList.add('hidden');
}
document.addEventListener('keydown', (e) => {
  if (e.key === 'Escape') closeIframe();
});

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 1. –ê–Ω–∏–º–∞—Ü–∏—è Bash-–±–ª–æ–∫–∞ (OSINT —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const osintLines = [
  "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê",
  "‚îÇ –í–∞–∫–∞–Ω—Å–∏—è:               ‚îÇ –†–µ–∞–ª—å–Ω–æ—Å—Ç—å:                 ‚îÇ",
  "‚îÇ \"–¢—Ä–µ–±—É–µ—Ç—Å—è              | –°–æ–±–µ—Å: –Ω–∞–π–¥–∏—Ç–µ –ò–ù–ù –ø–æ       |", 
  "|    OSINT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç\"    ‚îÇ –Ω–æ–º–µ—Ä—É –º–∞—à–∏–Ω—ã –∏ TikTok\"     |",
  "‚îÇ                         ‚îÇ                             ‚îÇ",
  "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
];


function typeBash(lines, targetId, lineDelay = 250, charDelay = 13) {
  const el = document.getElementById(targetId);
  if (!el) return;
  el.textContent = "";
  let line = 0, char = 0;

  function typeLine() {
    if (line >= lines.length) return;
    const currentLine = lines[line];
    let printed = "";

    function typeChar() {
      if (char < currentLine.length) {
        printed += currentLine[char];
        el.textContent = (el.textContent.split("\n").slice(0, line).join("\n") + (line > 0 ? "\n" : "") + printed);
        char++;
        setTimeout(typeChar, charDelay);
      } else {
        el.textContent += (line < lines.length - 1 ? "\n" : "");
        line++;
        char = 0;
        setTimeout(typeLine, lineDelay);
      }
    }
    typeChar();
  }
  typeLine();
}
const bashBlock = document.getElementById('osint-bash-block');
if (bashBlock) {
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        typeBash(osintLines, 'osint-bash-block');
        observer.unobserve(bashBlock);
      }
    });
  }, { threshold: 0.5 });
  observer.observe(bashBlock);
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 2. –ê–Ω–∏–º–∞—Ü–∏—è "–ü—Ä–æ–±–∏–≤–∞" –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ typing ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const osintProbingLines = [
  "–ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è: @name ...",
  "–ò–º—è: User U.",
  "VK: vk.com/name ‚Äî –Ω–∞–π–¥–µ–Ω–æ",
  "Telegram: @user ‚Äî –Ω–∞–π–¥–µ–Ω",
  "E-mail: u*******@mail.ru",
  "–ê–≤—Ç–æ: Lexus RX (–ê777–ê–ê77)",
  "–ò–ù–ù: ************",
  "–°–∫–∞–Ω –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...",
  "TikTok: –Ω–∞–π–¥–µ–Ω –∞–∫–∫–∞—É–Ω—Ç",
  "Github: –Ω–∞–π–¥–µ–Ω–æ 2 —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è",
  "–ü—É–±–ª–∏—á–Ω—ã–µ —Ñ–æ—Ç–æ: –Ω–∞–π–¥–µ–Ω–æ 14",
  "–ü—Ä–æ–±–∏–≤ –∑–∞–≤–µ—Ä—à—ë–Ω. ‚ú®"
];
function typeOsintProbe(lines, targetId, delay = 28, pause = 700) {
  const el = document.getElementById(targetId);
  if (!el) return;
  el.textContent = "";
  let lineIdx = 0, charIdx = 0;
  function nextChar() {
    if (lineIdx >= lines.length) {
      setTimeout(() => { el.textContent = ""; lineIdx = 0; charIdx = 0; nextChar(); }, 2400);
      return;
    }
    if (charIdx < lines[lineIdx].length) {
      el.textContent = el.textContent.replace(/\u2588/g, "") + lines[lineIdx][charIdx] + "\u2588";
      charIdx++;
      setTimeout(nextChar, delay);
    } else {
      el.textContent = el.textContent.replace(/\u2588/g, "") + "\n";
      charIdx = 0;
      lineIdx++;
      setTimeout(nextChar, pause + Math.random() * 400);
    }
  }
  nextChar();
}
document.addEventListener("DOMContentLoaded", () => {
  typeOsintProbe(osintProbingLines, "osint-typing", 28, 700);
});

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 3. Matrix-–∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è OSINT-demand –±–ª–æ–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
(function(){
  const canvas = document.getElementById("matrix-bg-osint");
  if (!canvas) return;
  const ctx = canvas.getContext("2d");

  function resize() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
  }
  resize();
  window.addEventListener('resize', resize);

  const letters = "01‚éã‚åò‚ö†$@#%&‚â°‚ñë‚ñì‚ñà";
  const fontSize = 18;
  let columns, drops;

  function setup() {
    columns = Math.floor(canvas.width / fontSize);
    drops = Array(columns).fill(1);
  }
  setup();
  window.addEventListener('resize', setup);

  function draw() {
    ctx.fillStyle = "rgba(0,0,0,0.07)";
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.font = fontSize + "px monospace";
    ctx.fillStyle = "#ffa600";
    for (let i = 0; i < drops.length; i++) {
      const text = letters[Math.floor(Math.random() * letters.length)];
      ctx.fillText(text, i * fontSize, drops[i] * fontSize);
      if (drops[i] * fontSize > canvas.height && Math.random() > 0.96) {
        drops[i] = 0;
      }
      drops[i]++;
    }
    requestAnimationFrame(draw);
  }
  draw();
})();

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 4. IntersectionObserver –¥–ª—è –ø–ª–∞–≤–Ω—ã—Ö –ø–æ—è–≤–ª–µ–Ω–∏–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const globalObserver = new IntersectionObserver((entries) => {
  entries.forEach(entry => {
    if (!entry.isIntersecting) return;
    entry.target.classList.add('animate');
    globalObserver.unobserve(entry.target);
  });
}, { threshold: 0.3 });

document.querySelectorAll('.observe').forEach(el => {
  globalObserver.observe(el);
});
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 6. –∞–≤—Ç–æ—Ä‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
document.addEventListener('DOMContentLoaded', () => {
  const crtCanvas = document.getElementById('crt-noise-author');
  if (!crtCanvas) return;
  const ctx = crtCanvas.getContext('2d');
  function resize() {
    crtCanvas.width = crtCanvas.offsetWidth || crtCanvas.clientWidth || window.innerWidth;
    crtCanvas.height = crtCanvas.offsetHeight || crtCanvas.clientHeight || window.innerHeight;
  }
  function drawCRT() {
    const w = crtCanvas.width, h = crtCanvas.height;
    const img = ctx.createImageData(w, h);
    for (let i = 0; i < img.data.length; i += 4) {
      const val = Math.random() * 255;
      img.data[i] = val;   // R
      img.data[i + 1] = val; // G
      img.data[i + 2] = val; // B
      img.data[i + 3] = 26; // Alpha (0..255)
    }
    ctx.putImageData(img, 0, 0);
    requestAnimationFrame(drawCRT);
  }
  window.addEventListener('resize', resize);
  resize();
  drawCRT();
});
//  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 7. –¥–ª—è –∫–æ–≥–æ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
document.addEventListener('DOMContentLoaded', () => {
  const crtCanvas = document.getElementById('crt-noise-forwhom');
  if (!crtCanvas) return;
  const ctx = crtCanvas.getContext('2d');
  function resize() {
    crtCanvas.width = crtCanvas.offsetWidth || crtCanvas.clientWidth || window.innerWidth;
    crtCanvas.height = crtCanvas.offsetHeight || crtCanvas.clientHeight || window.innerHeight;
  }
  function drawCRT() {
    const w = crtCanvas.width, h = crtCanvas.height;
    const img = ctx.createImageData(w, h);
    for (let i = 0; i < img.data.length; i += 4) {
      const val = Math.random() * 255;
      img.data[i] = val;
      img.data[i + 1] = val;
      img.data[i + 2] = val;
      img.data[i + 3] = 18;
    }
    ctx.putImageData(img, 0, 0);
    requestAnimationFrame(drawCRT);
  }
  window.addEventListener('resize', resize);
  resize();
  drawCRT();
});
